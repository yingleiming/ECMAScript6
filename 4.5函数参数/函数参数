javascript函数对参数的值没有进行任何的检查。
javascript函数的参数与大多数其他语言的函数参数有所不同。
函数不介意传进来多少个参数，也不在乎传进来的参数是什么数据类型。
甚至可以不传参数。

arguments：参数
在javascript函数中，并未指定函数形参的类型；在函数调用时也未对传入的实参做任何的类型检查。
实际上，javascript函数调用不检查传入形参的个数。
请看以下实例：
    function add(x) {
        return x+1;
    }
    console.log(add(1));//输出数字 2
    console.log(add("1"));//输出字符串 "11"
    console.log(add());//输出 NaN
    console.log(add(1,2));//输出 2

同名形参
在非严格模式下，一个函数中可以出现多个同名形参，但函数只能访问最后出现的那个同名形参。
请看以下实例：
    function add(x,x,x) {
        return x+1;
    }
    console.log(add(1,2,3));//输出 4
在严格模式下，一个函数中出现同名形参时，会抛出语法错误
请看以下实例：
    function des(x,x,x) {
        "use strict"
        return x+1;
    }
    console.log(des(1,2,3));
    //抛出错误 Uncaught SyntaxError: Duplicate parameter name not allowed in this context

参数个数
当实参比函数声明的形参少的时候，剩下的形参都将默认设置为undefined
    function add(x,y,z) {
        console.log(x,y,z)
    };
    add(1);//输出 1 undefined undefined
常常使用逻辑或运算符给省省略的参数设置一个合理的默认值。
    function shift(x,y) {
        y = y || 2;
        console.log(x,y);
    };
    shift(1);//输出 1 2
    shift(1,3);//输出 1 3
注意：使用 y||2 是不严谨的，显示的设置假值（undefined、null、false、0、-0、""、''、NaN）也会得到相同的结果。
所以要根据实际场景合理设置。
请看以下实例：
    function shift(x,y) {
        y = y || 2;
        console.log(x,y);
    };
    shift(1,0);//输出 1 2
    shift(1,undefined);//输出 1 2
    shift(1,false);//输出 1 2
    shift(1,-0);//输出 1 2
    shift(1,null);//输出 1 2
    shift(1,NaN);//输出 1 2
当实参比函数声明的形参多的时候，剩下的实参没有办法直接获得，需要使用即将提到的arguments对象。
先来看看arguments对象是个啥？
arguments对象再JS中算是比较特殊的对象。不能显示的创建，只能再函数调用的时候才能使用，长的有点像数组，但绝对不是Array
的实例。
请看以下实例：
    function test1() {
       console.log(arguments);
    }
    test1();//输出 Arguments [callee: ƒ, Symbol(Symbol.iterator): ƒ]

    function test2() {
        console.log(test2.arguments);
    }
    test2(1,2);//输出 Arguments(2) [1, 2, callee: ƒ, Symbol(Symbol.iterator): ƒ]

    function test3() {
        console.log(arguments.length);//输出 2
    }
    test3(1,2);

    function test4() {
        console.log(arguments[0]);//输出 1
        console.log(arguments[1]);//输出 2
    }
    test4(1,2);
arguments对象的长度不是有形参个数控制的而是由实参个数控制的。形参是函数内部重新开辟的内存空间存储的变量。对于arguments和
值都存再的情况下，两者值是同步的。若其中一个无值，则不会同步。
请看以下实例：


