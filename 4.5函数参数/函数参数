javascript函数对参数的值没有进行任何的检查。
javascript函数的参数与大多数其他语言的函数参数有所不同。
函数不介意传进来多少个参数，也不在乎传进来的参数是什么数据类型。
甚至可以不传参数。

arguments：参数
在javascript函数中，并未指定函数形参的类型；在函数调用时也未对传入的实参做任何的类型检查。
实际上，javascript函数调用不检查传入形参的个数。
请看以下实例：
    function add(x) {
        return x+1;
    }
    console.log(add(1));//输出数字 2
    console.log(add("1"));//输出字符串 "11"
    console.log(add());//输出 NaN
    console.log(add(1,2));//输出 2

同名形参
在非严格模式下，一个函数中可以出现多个同名形参，但函数只能访问最后出现的那个同名形参。
请看以下实例：
    function add(x,x,x) {
        return x+1;
    }
    console.log(add(1,2,3));//输出 4
在严格模式下，一个函数中出现同名形参时，会抛出语法错误
请看以下实例：
    function des(x,x,x) {
        "use strict"
        return x+1;
    }
    console.log(des(1,2,3));
    //抛出错误 Uncaught SyntaxError: Duplicate parameter name not allowed in this context

参数个数
当实参比函数声明的形参少的时候，剩下的形参都将默认设置为undefined
    function add(x,y,z) {
        console.log(x,y,z)
    };
    add(1);//输出 1 undefined undefined
常常使用逻辑或运算符给省省略的参数设置一个合理的默认值。
    function shift(x,y) {
        y = y || 2;
        console.log(x,y);
    };
    shift(1);//输出 1 2
    shift(1,3);//输出 1 3
注意：使用 y||2 是不严谨的，显示的设置假值（undefined、null、false、0、-0、""、''、NaN）也会得到相同的结果。
所以要根据实际场景合理设置。
请看以下实例：
    function shift(x,y) {
        y = y || 2;
        console.log(x,y);
    };
    shift(1,0);//输出 1 2
    shift(1,undefined);//输出 1 2
    shift(1,false);//输出 1 2
    shift(1,-0);//输出 1 2
    shift(1,null);//输出 1 2
    shift(1,NaN);//输出 1 2
当实参比函数声明的形参多的时候，剩下的实参没有办法直接获得，需要使用即将提到的arguments对象。
先来看看arguments对象是个啥？
arguments对象再JS中算是比较特殊的对象。不能显示的创建，只能再函数调用的时候才能使用，长的有点像数组，但绝对不是Array
的实例。
请看以下实例：
    function test1() {
       console.log(arguments);
    }
    test1();//输出 Arguments [callee: ƒ, Symbol(Symbol.iterator): ƒ]

    function test2() {
        console.log(test2.arguments);
    }
    test2(1,2);//输出 Arguments(2) [1, 2, callee: ƒ, Symbol(Symbol.iterator): ƒ]

    function test3() {
        console.log(arguments.length);//输出 2
    }
    test3(1,2);

    function test4() {
        console.log(arguments[0]);//输出 1
        console.log(arguments[1]);//输出 2
    }
    test4(1,2);
javascript中的参数在内部是使用一个数组来表示的。函数接收到的始终都是这个数组，而不关心数组中包含了哪些参数。在函数体内可以
通过arguments对象来访问来访问这个参数数组，从而获取传递给函数的每一个参数。arguments对象并不是Array的实例，它是一个类数组
对象，可以使用方括号语法访问它的每一个元素。
请看以下实例：
    function add(x) {
        console.log(arguments[0],arguments[1],arguments[2]);
        return x + 1;
    }
    add(1,2,3);//1,2,3
arguments对象的length属性显示实参的个数。函数的length属性显示形参的个数。
    function add(x,y) {
        console.log(arguments.length);//3
        return x + 1;
    }
    add(1,2,3);
    console.log(add.length);//2
形参只是提供便利，但不是必须的
    function add(){
        return arguments[0] + arguments[1];
    }
    console.log(add(1,2));//3

内部属性 callee
arguments有一个叫callee的内部属性，该属性是一个指针，指向拥有这个arguments对象的函数。
请看以下是一个阶乘实例：
    function factorial(num){
        if(num<=1){
            return 1;
        }else {
            return num*factorial(num-1)
        }
    };
    console.log(factorial(5));//120
但是上面这个函数的执行与函数名紧紧的耦合在了一起，可以使用arguments.callee消除函数解耦。
    function factorial(num){
        if(num<=1){
            return 1;
        }else {
            return num*arguments.callee(num-1)
        }
    };
    console.log(factorial(5));
但在严格模式下，使用arguments.callee会报出TypeError错误:
    function factorial(num){
        "use strict";
        if(num<=1){
            return 1;
        }else {
            return num*arguments.callee(num-1)
        }
    };
    console.log(factorial(5));
    //Uncaught TypeError: 'caller', 'callee', and 'arguments' properties may not be accessed on strict mode functions or the arguments objects for calls to them
这时，可以使用具名的函数表达式来解决这个问题。
    var factorial = function fn(num){
        "use strict";
        if(num<=1){
            return 1;
        }else {
            return num*fn(num-1)
        }
    };
    console.log(factorial(5));//120

函数重载：
javascript函数不能像传统意义上那样实现函数重载。而在其他语言中，可以未一个函数编写两个定义，只要这两个定义的签名（接受的参数的
类型和数量）不同即可。
javascript没有函数签名，因为其参数是由包含0或多个值的数组来表示的。而没有函数签名，真正意义上的函数重载是不可能做到的。
请看以下实例：
    //后面的声明覆盖了前面的声明
    function addNumber(num){
        return num + 100;
    }
    console.log(addNumber(100));//300
    function  addNumber(num) {
        return num +200;
    }
    console.log(addNumber(100));//300
只能通过检查传入的参数的类型和数量并作出不同的反应，来模拟函数的重载:
    //模拟函数重载 通过判断传入参数的类型和数量，来模拟函数的重载
    function doAdd(){
        if(arguments.length==1){
            console.log(arguments[0] + 10);
        }else if(arguments.length==2){
            console.log(arguments[0] + arguments[1]);
        }
    }
    doAdd(10);//20
    doAdd(10,20);//30

javascript中所有函数的参数都是按值传递的,也就是说把函数外部的值复制给函数内部的参数，就是把值从一个变量复制给另一个变量。
1】基本类型值
在向参数传递基本类型的值时，被传递的值会被复制给一个局部变量（命名参数或arguments对象的一个元素）。
    function addTen(num) {
        return num + 10;
    };
    var count = 20;
    console.log(count);//20 没有变化
    var result = addTen(20);////按值传递 num = count
    console.log(result);//30
2】引用类型的值
在向参数传递引用类型的值时，会把这个值在内存中的地址复制给一个局部变量，因此这个局部变量的变化会影响到外部。
请看以下实例：
    function setName(obj){
        obj.name = "Nicholas";
    }
    var person  = new Object();
    setName(person );//obj = person
    console.log(person.name);// "Nicholas"



